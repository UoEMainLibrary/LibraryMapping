$(document).on('admin#map:loaded', function(){
  var floor = $('body').data().floor;

  var boundingBox = new fabric.Rect({
    fill: "transparent",
    width: 6000,
    height: 4000,
    hasBorders: false,
    hasControls: false,
    lockMovementX: true,
    lockMovementY: true,
    evented: false,
    selectable: false,
    stroke: "#333"
  });

  canvas.add(boundingBox);

  canvas.svgViewportTransformation = false;
  canvas.renderOnAddRemove = false;

  canvas.setBackgroundColor('#fff', function () {
    canvas.renderAll();
  });


  canvas.setBackgroundImage("<%= asset_path("overlay_ml_1.png") %>", canvas.renderAll.bind(canvas), {
    width: 6000,
    height: 4000,
    opacity: 0.3
  });

  wallCircles = [];


  var minZoom = canvas.width / boundingBox.width
  canvas.viewport.zoom = minZoom;
  $("#zoomSlider").attr("min", minZoom);
  $("#zoomSlider").val(minZoom);
  $(".progress-bar").css("width", $("#zoomSlider").val());

  saveCanvas = function() {
    canvas.deactivateAll();
    removeWallCircles();

    var obj = canvas.getObjects().filter(function(o) {
      return o.modified == true
    } );

    console.log(JSON.stringify(obj));
    restoreWallCircles();

    return $.ajax({
      url : "/admin/"+floor,
      type : "post",
      data : { elements: JSON.stringify(obj) },
      success : function(){
        location.reload();
      }
    });

  }



  $("#commands")
      .mouseover(function() {
        $("#commands").css("right", 0);
      })
      .mouseout(function() {
        $("#commands").css("right", -490);
      });

  $("#switch").click(function(){
    $("#commands").css("right", 0);
  });

  var clipboardObj, clipboardGroup;
  $(document).on("keydown", function(e){
    if (e.keyCode == 67 && (e.ctrlKey || e.metaKey)){
      var obj = canvas.getActiveObject(), group = canvas.getActiveGroup();
      if(obj){
        clipboardObj = obj;
      }else if(group){
        clipboardGroup = group;
      }
    }else if(e.keyCode == 86 && (e.ctrlKey || e.metaKey)){
      if(clipboardObj) {
        var clone = fabric.util.object.clone(clipboardObj);
        clone.set({
          left: clipboardObj.left + 30,
          top: clipboardObj.top + 30
        });

        clone.id = null;
        clone.modified = true;

        canvas.add(clone);
        canvas.deactivateAll().renderAll();
        canvas.setActiveObject(clone);

      }else if(clipboardGroup){
        canvas.deactivateAll();

        clipboardGroup.forEachObject(function(o) {
          var clone = fabric.util.object.clone(o);
          clone.set({
            left: o.left + 30,
            top: o.top + 30
          }).setCoords();

          clone.id = null;
          clone.modified = true;
          canvas.add(clone);
        });

        canvas.renderAll();

      }
    }
  });

  document.body.addEventListener('keydown', function(evt) {
    if(evt.keyCode==18) {
      canvas.isGrabMode = true;
    }

    var movementDelta = 2;

    if(event.shiftKey){
      movementDelta = 10;
    }
    var activeObject = canvas.getActiveObject();
    var activeGroup = canvas.getActiveGroup();

    if (evt.keyCode === 37) {
      evt.preventDefault(); // Prevent the default action
      if (activeObject) {
        var a = activeObject.get('left') - movementDelta;
        activeObject.set('left', a);
      }
      else if (activeGroup) {
        var a = activeGroup.get('left') - movementDelta;
        activeGroup.set('left', a);
      }

    } else if (evt.keyCode === 39) {
      evt.preventDefault(); // Prevent the default action
      if (activeObject) {
        var a = activeObject.get('left') + movementDelta;
        activeObject.set('left', a);
      }
      else if (activeGroup) {
        var a = activeGroup.get('left') + movementDelta;
        activeGroup.set('left', a);
      }
    } else if (evt.keyCode === 38) {
      evt.preventDefault(); // Prevent the default action
      if (activeObject) {
        var a = activeObject.get('top') - movementDelta;
        activeObject.set('top', a);
      }
      else if (activeGroup) {
        var a = activeGroup.get('top') - movementDelta;
        activeGroup.set('top', a);
      }

    } else if (evt.keyCode === 40) {
      evt.preventDefault(); // Prevent the default action
      if (activeObject) {
        var a = activeObject.get('top') + movementDelta;
        activeObject.set('top', a);
      }
      else if (activeGroup) {
        var a = activeGroup.get('top') + movementDelta;
        activeGroup.set('top', a);
      }
    }

    if(evt.keyCode == 46) {
      removeSelected();
    }

    if (activeObject) {
      activeObject.setCoords();
      activeObject.modified = true;
      canvas.renderAll();
    } else if (activeGroup) {
      activeGroup.setCoords();
      activeGroup.forEachObject(function(o) {
        o.modified = true;
      });
      canvas.renderAll();
    }

  });

  document.body.addEventListener('keyup', function(e) {
    if(e.keyCode==18) {
      canvas.isGrabMode = false;
    }
  });

  saveElementData = function (){
    var obj = canvas.getActiveObject();

    obj.range_up_opt =  $("#range_up_opt").val();
    obj.range_up_digits =  $("#range_up_digits").val();
    obj.range_up_letters = $("#range_up_letters").val();

    obj.range_down_opt =  $("#range_down_opt").val();
    obj.range_down_digits =  $("#range_down_digits").val();
    obj.range_down_letters = $("#range_down_letters").val();

    obj.classification =  $("#classification").val();
    obj.identifier = $("#identifier").val();

    $.ajax({
      url : "/admin/save_element/" + floor,
      type : "post",
      data : { element: JSON.stringify(obj) }
    });
  }

  var gridSize = 20;

  var gridEnabled = true;
  var lines = [];
  for (var i = 0; i < (boundingBox.width / gridSize); i++) {
    lines.push(new fabric.Line([ i * gridSize, 0, i * gridSize, boundingBox.height], { stroke: '#ccc'})); // vertical lines
    lines.push(new fabric.Line([ 0, i * gridSize, boundingBox.width, i * gridSize], { stroke: '#ccc'})) // horizontal lines
  }

  var grid = new fabric.Group(lines, {selectable: false, evented: false});


  canvas.on('object:modified', function(options) {
    if (options.target._objects) {
      options.target._objects.forEach(function(o) {
        setObjectModified(o);
      })
    } else {
      setObjectModified(options.target);
    }
  });

  setObjectModified = function(o){
    if(o.type == "circle") {
      if(o.line1){
        o.line1.modified = true;
      }else{
        o.line2.modified = true;
      }
    }else{
      o.modified = true;
    }
  }

  canvas.on('object:removed', function(options){
    if(options.target.id) {
      $.ajax({
        url: "/admin/" + floor,
        type: "delete",
        data: {element_id: options.target.id}
      });
    }
  });

  removeSelected = function() {
    var activeObject = canvas.getActiveObject(),
        activeGroup = canvas.getActiveGroup();

    if ((activeObject || activeGroup) && confirm('Are you sure?')) {
      if (activeGroup) {
        var objectsInGroup = activeGroup.getObjects();
        canvas.discardActiveGroup();
        objectsInGroup.forEach(function (object) {
          removeObject(object);
        });
      }
      else if (activeObject) {
        removeObject(activeObject);
      }
    }
  }

  removeObject = function(activeObject){
    if(activeObject.type == "circle"){
      canvas.remove(activeObject.line1);
      canvas.remove(activeObject.line2);
      for(var i=0; i < wallCircles.length; i++){
        if(activeObject.line1){
          if(wallCircles[i].line1 == activeObject.line1 || wallCircles[i].line2 == activeObject.line1){
            canvas.remove(wallCircles[i]);
          }
        }else if(activeObject.line2){
          if(wallCircles[i].line1 == activeObject.line2 || wallCircles[i].line2 == activeObject.line2){
            canvas.remove(wallCircles[i]);
          }
        }
      }
    }else{
      canvas.remove(activeObject);
    }
  }

  canvas.on('object:rotating', function(options) {
    if (options.e.shiftKey) {
      options.target.angle = options.target.angle - options.target.angle % 45
    }
  });

  canvas.on('object:selected', function(options){
    $("#remove-selected").css("display", "initial");
    $("#shelfData").css("display", "none");
    if(options.target.element_type_name == "Shelf") {
      $("#shelfData").css("display", "initial");
    }

    $("#range_up_opt").val(options.target.range_up_opt);
    $("#range_up_letters").val(options.target.range_up_letters);
    $("#range_up_digits").val(options.target.range_up_digits);

    $("#range_down_opt").val(options.target.range_down_opt);
    $("#range_down_letters").val(options.target.range_down_letters);
    $("#range_down_digits").val(options.target.range_down_digits);

    $("#classification").val(options.target.classification);
    $("#identifier").val(options.target.identifier);
  });

  canvas.on('selection:cleared', function(options){
    console.log('')
    $("#remove-selected").css("display", "none");
    $("#shelfData").css("display", "none");
  });

  canvas.on("object:moving", function(e) {
    var obj = e.target;
    var top = obj.top;
    var left = obj.left;
    var zoom = canvas.viewport.zoom;

    // width & height we are constraining to must be calculated by applying the inverse of the current viewportTransform
    var c_width = canvas.width / zoom;
    var c_height = canvas.height / zoom;

    var w = obj.width * obj.scaleX;
    var h = obj.height * obj.scaleY;

    var top_bound = boundingBox.top;
    var bottom_bound = boundingBox.top + boundingBox.height - h;
    var left_bound = boundingBox.left;
    var right_bound = boundingBox.left + boundingBox.width - w;

    if( w > c_width ) {
      obj.setLeft(left_bound);
    } else {
      if (gridEnabled) {
        obj.setLeft(Math.min(Math.max(Math.round(left / gridSize) * gridSize, left_bound), right_bound));
      } else {
        obj.setLeft(Math.min(Math.max(left, left_bound), right_bound));
      }
    }

    if( h > c_height ) {
      obj.setTop(top_bound);
    } else {
      if (gridEnabled) {
        obj.setTop(Math.min(Math.max(Math.round(top / gridSize) * gridSize, top_bound), bottom_bound));
      } else {
        obj.setTop(Math.min(Math.max(top, top_bound), bottom_bound));
      }
    }
  });

  $('#zoomIn').click(function(){
    var newZoom = canvas.viewport.zoom * 1.1;
    if (newZoom <= 1.5) {
      canvas.setZoom(newZoom);
      $("#zoomSlider").val(newZoom);
    }
    return false;
  });

  $('#zoomOut').click(function(){
    var newZoom = canvas.viewport.zoom / 1.1;
    if (newZoom >= minZoom) {
      canvas.setZoom(newZoom);
      $("#zoomSlider").val(newZoom);
    }
    return false;
  });

  $('#zoomSlider').on('input', function() {
    canvas.setZoom($(this).val());
    if (canvas.viewport.position.x > 0) {
      canvas.viewport.position.x = 0;
    }
    if (canvas.viewport.position.y > 0) {
      canvas.viewport.position.y = 0;
    }
    canvas.renderAll();
  });

  $('.edit').click(function(){
    canvas.isGrabMode = false;
    return false;
  });

  $('#gridCheckbox').click(function(){
    if ($(this).prop('checked')) {
      canvas.add(grid);
      canvas.sendToBack(grid);
      gridEnabled = true;
    } else {
      canvas.remove(grid);
      gridEnabled = false;
    }
  });

  $('#rasterize-svg').click(function(){
    var w = canvas.width;
    var h = canvas.height;

    canvas.width = 6003;
    canvas.height = 4003;
    canvas.remove(grid);
    removeWallCircles();

    var data = canvas.toSVG()
    $.ajax({
      url : "/admin/save_svg/"+floor,
      type : "post",
      data : { svg_data: data }
    });

    restoreWallCircles();
    canvas.width = w;
    canvas.height = h;
    canvas.add(grid);
    canvas.sendToBack(grid);

  });

  addShape = function(assetId, assetName, assetPath) {

    var coord = {
      left: (- canvas.viewport.position.x / canvas.viewport.zoom) + ( canvas.width / canvas.viewport.zoom / 2),
      top: (- canvas.viewport.position.y / canvas.viewport.zoom) + ( canvas.height / canvas.viewport.zoom / 2)
    };


    fabric.loadSVGFromURL(assetPath, function(objects, options) {

      var loadedObject = fabric.util.groupSVGElements(objects, options);
      loadedObject.toObject = (function (toObject) {
        return function () {
          var opts = {
            id: this.id,
            floor: this.floor,
            element_type_id: this.element_type_id,
            modified: this.modified,
            element_type_name: this.element_type_name
          }

          if (assetName == "Shelf") {
            $.extend(opts, {
              classification: this.classification,
              identifier: this.identifier,
              range_up_opt: this.range_up_opt,
              range_up_digits: this.range_up_digits,
              range_up_letters:this.range_up_letters,
              range_down_opt: this.range_down_opt,
              range_down_digits: this.range_down_digits,
              range_down_letters: this.range_down_letters
            })
          }
          return fabric.util.object.extend(toObject.call(this), opts);
        };
      })(fabric.Object.prototype.toObject);

      loadedObject.set({
            left: coord.left,
            top: coord.top,
            angle: 0,
            floor: floor,
            element_type_id: parseInt(assetId),
            modified: true,
            id: null,
            element_type_name: assetName
          })
          .setCoords();

      if (assetName == "Shelf") {
        loadedObject.set({
          range_up_opt: "",
          range_up_digits: "",
          range_up_letters: "",
          range_down_opt: "",
          range_down_digits: "",
          range_down_letters: "",
          classification: "",
          identifier: ""
        })
      }

      canvas.add(loadedObject);
    });
  }

  canvas.add(grid);

  handleScroll = function(evt){
    var delta = evt.wheelDelta ? evt.wheelDelta/40 : evt.detail ? -evt.detail : 0;
    if (delta > 0) {
      var newZoom = canvas.viewport.zoom / 1.1;
      if (newZoom >= minZoom) {
        canvas.setZoom(newZoom);
        $("#zoomSlider").val(newZoom);
      }
    } else if (delta < 0) {
      var newZoom = canvas.viewport.zoom * 1.1;
      if (newZoom <= 1.5) {
        canvas.setZoom(newZoom);
        $("#zoomSlider").val(newZoom);
      }
    }
    return evt.preventDefault() && false;
  };

  makeCircle = function(left, top, line1, line2) {
    var c = new fabric.Circle({
      left: left,
      top: top,
      strokeWidth: 5,
      radius: 12,
      fill: '#fff',
      stroke: '#666',
      originX: 'center',
      originY: 'center'
    });
    c.hasControls = c.hasBorders = false;

    c.line1 = line1;
    c.line2 = line2;

    return c;
  }

  makeLine = function(coords) {
    return new fabric.Line(coords, {
      fill: '#333',
      stroke: '#333',
      strokeWidth: 5,
      selectable: false,
      originX: 'center',
      originY: 'center'
    });
  }


  addWall = function(id) {

    var coord = {
      left: (- canvas.viewport.position.x / canvas.viewport.zoom) + ( canvas.width / canvas.viewport.zoom / 2),
      top: (- canvas.viewport.position.y / canvas.viewport.zoom) + ( canvas.height / canvas.viewport.zoom / 2)
    };

    var wall = makeLine([ coord.left, coord.top, coord.left + 100, coord.top+100 ]);

    console.log(coord.left, coord.top, coord.left + 100, coord.top+100 );

    wall.toObject = (function (toObject) {
      return function () {
        var opts = {
          id: this.id,
          floor: this.floor,
          element_type_id: this.element_type_id,
          modified: this.modified,
          top: this.x1,
          left: this.x2,
          right: this.y1,
          bottom: this.y2
        }

        return fabric.util.object.extend(toObject.call(this), opts);
      }
    })(fabric.Object.prototype.toObject);


    wall.set({
          floor: floor,
          element_type_id: id,
          modified: true,
          id: null,
        })
        .setCoords();

    canvas.add(wall);

    var circle1 = makeCircle(wall.get('x1'), wall.get('y1'), null, wall);
    var circle2 = makeCircle(wall.get('x2'), wall.get('y2'), wall, null);

    wallCircles.push(circle1,circle2);

    canvas.add(circle1, circle2);
  }

  removeWallCircles = function() {
    for(var i=0; i < wallCircles.length; i++){
      canvas.remove(wallCircles[i]);
    }
  }

  restoreWallCircles = function() {
    for(var i=0; i < wallCircles.length; i++){
      canvas.add(wallCircles[i]);
    }
  }

  canvas.on('object:moving', function(e) {
    var p = e.target;
    p.line1 && p.line1.set({ 'x2': p.left, 'y2': p.top });
    p.line2 && p.line2.set({ 'x1': p.left, 'y1': p.top });
    canvas.renderAll();
  });

  var canvas_container = document.getElementById('canvas-container');
  canvas_container.addEventListener('DOMMouseScroll',handleScroll,false);
  canvas_container.addEventListener('mousewheel',handleScroll,false);

  $(document).trigger('canvas:preloaded');

});

var counter = 0;
function loadElementInCanvas(element, element_type, svg_path, last) {
  if (element_type != "Wall") {
    var shape = svg_path;

    fabric.loadSVGFromURL(shape, function(objects, options) {
      var loadedObject = fabric.util.groupSVGElements(objects, options);

      loadedObject.toObject = (function (toObject) {
        return function () {
          var opts = {
            id: this.id,
            floor: this.floor,
            element_type_id: this.element_type_id,
            modified: this.modified,
            element_type_name: this.element_type_name
          };
          if (element_type == "Shelf") {
            $.extend(opts, {
              classification: this.classification,
              identifier: this.identifier,
              range_up_opt: this.range_up_opt,
              range_up_digits: this.range_up_digits,
              range_up_letters:this.range_up_letters,
              range_down_opt: this.range_down_opt,
              range_down_digits: this.range_down_digits,
              range_down_letters: this.range_down_letters
            })
          }
          return fabric.util.object.extend(toObject.call(this), opts);
        };
      })(fabric.Object.prototype.toObject);

      loadedObject.set({
            left: element.left,
            top: element.top,
            scaleX: element.scaleX,
            scaleY: element.scaleY,
            opacity: element.opacity,
            angle: element.angle,
            fill: element.fill,
            id: element.id,
            floor: element.floor,
            modified: false,
            element_type_id: element.element_type_id,
            element_type_name: element_type
          })
          .setCoords();

      if (element_type == "Shelf") {
        loadedObject.set({
          range_up_opt: element.range_up_opt,
          range_up_digits: element.range_up_digits,
          range_up_letters: element.range_up_letters,
          range_down_opt: element.range_down_opt,
          range_down_digits: element.range_down_digits,
          range_down_letters: element.range_down_letters,
          classification: element.classification,
          identifier: element.identifier,
        })
      }
      canvas.add(loadedObject);
      counter++
      if (counter == last) {
        canvas.renderOnAddRemove = true;
        canvas.renderAll();
      }
    });
  } else {
    var wall = makeLine([element.top, element.right, element.left, element.bottom]);

    wall.toObject = (function (toObject) {
      return function () {
        var opts = {
          id: this.id,
          floor: this.floor,
          element_type_id: this.element_type_id,
          modified: this.modified,
          top: this.x1,
          left: this.x2,
          element_type_name: this.element_type_name,
          right: this.y1,
          bottom: this.y2
        }

        return fabric.util.object.extend(toObject.call(this), opts);
      }
    })(fabric.Object.prototype.toObject);

    wall.set({
          floor: element.floor,
          element_type_id: element.element_type_id,
          modified: false,
          id: element.id,
          element_type_name: "Wall"
        })
        .setCoords();

    canvas.add(wall);

    var circle1 = makeCircle(wall.get('x1'), wall.get('y1'), null, wall);
    var circle2 = makeCircle(wall.get('x2'), wall.get('y2'), wall);

    wallCircles.push(circle1, circle2);

    canvas.add(circle1, circle2);

  }
}