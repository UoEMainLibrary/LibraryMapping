
<!DOCTYPE html>
<html lang="en" ng-app="kitchensink">
<body>

<div id="bd-wrapper" ng-controller="CanvasControls">
  <h2><span>LibraryMapping</span> &middot; Admin panel</h2>

  <!--[if IE]><script src="http://fabricjs.com/lib/fonts/Delicious.font.js"></script><![endif]-->



  <link href='http://fonts.googleapis.com/css?family=Plaster' rel='stylesheet' type='text/css'>
  <link href='http://fonts.googleapis.com/css?family=Engagement' rel='stylesheet' type='text/css'>

  <div style="position:relative;width:704px;float:left;" id="canvas-wrapper">

    <div id="canvas-controls">
      <div id="complexity">
        Canvas complexity (number of paths):
        <strong>{[ canvas.complexity() ]}</strong>
      </div>

      <div id="canvas-background">
        <label for="canvas-background-picker">Canvas background:</label>
        <input type="color" bind-value-to="canvasBgColor">
      </div>
    </div>

    <div id="canvas-container">
      <canvas id="canvas" width="700" height="600"></canvas>
    </div>
    <div id="color-opacity-controls" ng-show="canvas.getActiveObject()">

      <label for="opacity">Opacity: </label>
      <input value="100" type="range" bind-value-to="opacity">

      <label for="color" style="margin-left:10px">Color: </label>
      <input type="color" style="width:40px" bind-value-to="fill">
    </div>

    <div id="text-wrapper" style="margin-top: 10px" ng-show="getText()">

      <textarea bind-value-to="text"></textarea>

      <div id="text-controls">
        <label for="font-family" style="display:inline-block">Font family:</label>
        <select id="font-family" class="btn-object-action" bind-value-to="fontFamily">
          <option value="arial">Arial</option>
          <option value="helvetica" selected>Helvetica</option>
          <option value="myriad pro">Myriad Pro</option>
          <option value="delicious">Delicious</option>
          <option value="verdana">Verdana</option>
          <option value="georgia">Georgia</option>
          <option value="courier">Courier</option>
          <option value="comic sans ms">Comic Sans MS</option>
          <option value="impact">Impact</option>
          <option value="monaco">Monaco</option>
          <option value="optima">Optima</option>
          <option value="hoefler text">Hoefler Text</option>
          <option value="plaster">Plaster</option>
          <option value="engagement">Engagement</option>
        </select>
        <br>
        <label for="text-align" style="display:inline-block">Text align:</label>
        <select id="text-align" class="btn-object-action" bind-value-to="textAlign">
          <option>Left</option>
          <option>Center</option>
          <option>Right</option>
          <option>Justify</option>
        </select>
        <div>
          <label for="text-bg-color">Background color:</label>
          <input type="color" value="" id="text-bg-color" size="10" class="btn-object-action"
                 bind-value-to="bgColor">
        </div>
        <div>
          <label for="text-lines-bg-color">Background text color:</label>
          <input type="color" value="" id="text-lines-bg-color" size="10" class="btn-object-action"
                 bind-value-to="textBgColor">
        </div>
        <div>
          <label for="text-stroke-color">Stroke color:</label>
          <input type="color" value="" id="text-stroke-color" class="btn-object-action"
                 bind-value-to="strokeColor">
        </div>
        <div>
          <label for="text-stroke-width">Stroke width:</label>
          <input type="range" value="1" min="1" max="5" id="text-stroke-width" class="btn-object-action"
                 bind-value-to="strokeWidth">
        </div>
        <div>
          <label for="text-font-size">Font size:</label>
          <input type="range" value="" min="1" max="120" step="1" id="text-font-size" class="btn-object-action"
                 bind-value-to="fontSize">
        </div>
        <div>
          <label for="text-line-height">Line height:</label>
          <input type="range" value="" min="0" max="10" step="0.1" id="text-line-height" class="btn-object-action"
                 bind-value-to="lineHeight">
        </div>
      </div>
      <div id="text-controls-additional">
        <button type="button" class="btn btn-object-action"
                ng-click="toggleBold()"
                ng-class="{'btn-inverse': isBold()}">
          Bold
        </button>
        <button type="button" class="btn btn-object-action" id="text-cmd-italic"
                ng-click="toggleItalic()"
                ng-class="{'btn-inverse': isItalic()}">
          Italic
        </button>
        <button type="button" class="btn btn-object-action" id="text-cmd-underline"
                ng-click="toggleUnderline()"
                ng-class="{'btn-inverse': isUnderline()}">
          Underline
        </button>
        <button type="button" class="btn btn-object-action" id="text-cmd-linethrough"
                ng-click="toggleLinethrough()"
                ng-class="{'btn-inverse': isLinethrough()}">
          Linethrough
        </button>
        <button type="button" class="btn btn-object-action" id="text-cmd-overline"
                ng-click="toggleOverline()"
                ng-class="{'btn-inverse': isOverline()}">
          Overline
        </button>
      </div>
    </div>
  </div>

  <div id="commands" ng-click="maybeLoadShape($event)">

    <ul class="nav nav-tabs">
      <li><a href="#simple-shapes" data-toggle="tab">Simple</a></li>
      <li><a href="#svg-shapes" data-toggle="tab">SVG</a></li>
      <li class="active"><a href="#object-controls-pane" data-toggle="tab">Controls</a></li>
      <li><a href="#load-svg-pane" data-toggle="tab">Load SVG</a></li>
      <li><a href="#execute-code" data-toggle="tab">Execute</a></li>
      <li><a href="#json-inout" data-toggle="tab">JSON</a></li>
    </ul>

    <div class="tab-content">

      <div class="tab-pane" id="svg-shapes">
        <p>Add <strong>SVG shapes</strong> to canvas:</p>

        <ul class="svg-shapes">
          <% ElementType.all.each do |type| %>
              <li>
                <button class="btn btn-small shape" id="<%= type.id %>" onclick="addShape(<%= type.id %>, '<%= asset_path(type.svg_path + ".svg") %>')">
                  <img src="<%= asset_path(type.svg_path + ".svg") %>" width="150px"> <br> <strong><%= type.name %></strong>
                </button>
              </li>
          <% end %>
        </ul>
      </div>

      <div class="tab-pane" id="simple-shapes">
        <p>Add <strong>simple shapes</strong> to canvas:</p>
        <p>
          <button type="button" class="btn rect" ng-click="addRect()">Rectangle</button>
          <button type="button" class="btn circle" ng-click="addCircle()">Circle</button>
          <button type="button" class="btn triangle" ng-click="addTriangle()">Triangle</button>
          <button type="button" class="btn line" ng-click="addLine()">Line</button>
          <button type="button" class="btn polygon" ng-click="addPolygon()">Polygon</button>
        </p>

        <p>
          <button class="btn" ng-click="addText()">Add text</button>
        </p>

        <p>Add <strong>images</strong> to canvas:</p>
        <p>
          <button type="button" class="btn image1" ng-click="addImage1()">Image 1 (pug)</button>
          <button type="button" class="btn image2" ng-click="addImage2()">Image 2 (google)</button>
          <button type="button" class="btn image3" n-click="addImage3()">Image 3 (printio)</button>
        </p>

        <p>Add <strong>gradient-based shapes</strong> to canvas:</p>

        <p>
          <button class="btn shape" id="shape74">Gradient 1</button>
          <button class="btn shape" id="shape66">Gradient 2</button>
          <button class="btn shape" id="shape75">Gradient 3</button>
          <button class="btn shape" id="shape148">Gradient 4</button>
        </p>

        <p>Add <strong>arcs</strong> and misc to canvas:</p>

        <p>
          <button class="btn shape" id="shape104">Arc(s) 1</button>
          <button class="btn shape" id="shape105">Arc(s) 2</button>
          <button class="btn shape" id="shape106">Arc(s) 3</button>
          <button class="btn shape" id="shape107">Arc(s) 4</button>
        </p>
        <p>
          <button class="btn shape" id="shape103">Transformed paths</button>
        </p>
        <p>
          <button class="btn shape" id="shape54">Image</button>
        </p>
      </div>

      <div class="tab-pane active" id="object-controls-pane">
        <div id="global-controls">
          <p>
            Rasterize canvas to
            <button class="btn btn-success" id="rasterize" ng-click="rasterize()">
              Image
            </button>
            <button class="btn btn-success" id="rasterize-svg" ng-click="rasterizeSVG()">
              SVG
            </button>
            <button class="btn btn-success" id="rasterize-json" ng-click="rasterizeJSON()">
              JSON
            </button>
          </p>
          <p>
            <input type="range" value="0.3" step="0.05" min="0.1" max="1" id="zoomSlider"/>
            <button class="btn btn-success" id="zoomIn">Zoom +</button>
            <button class="btn btn-success" id="zoomOut">Zoom -</button>
            <a href="#" class="btn btn-primary edit"><i class="fa fa-edit"></i> Edit mode</a>
            <a href="#" class="btn btn-primary grab"><i class="fa fa-arrows"></i> Grab mode</a>
          </p>
          <p>
            <button class="btn btn-default clear" onclick="saveCanvas()">Save elements</button>
          </p>
        </div>

        <div class="object-controls" object-buttons-enabled="getSelected()">

          <div style="margin-top:10px;">
            <p>
              <button class="btn btn-object-action" id="remove-selected"
                      ng-click="removeSelected()">
                Remove selected object/group
              </button>
            </p>

          </div>
        </div>

        <br>
        <br>

        <label> Floors: </label>
        <%= link_to "1", {controller: "admin", action: "map", floor: 1}, class: "btn btn-default", data: { no_turbolink: true } %>
        <%= link_to "2", {controller: "admin", action: "map", floor: 2}, class: "btn btn-default", data: { no_turbolink: true } %>
        <%= link_to "3", {controller: "admin", action: "map", floor: 3}, class: "btn btn-default", data: { no_turbolink: true } %>
        <%= link_to "4", {controller: "admin", action: "map", floor: 4}, class: "btn btn-default", data: { no_turbolink: true } %>

        <br>
        <br>
        <label for="rangeUp"> Range Up: </label>
        <input class="elementData" type="text" id="rangeUp" name="rangeUp" disabled>
        <br>
        <label for="rangeUpSmall"> Range Up Small: </label>
        <input class="elementData" type="text" id="rangeUpSmall" name="rangeUpSmall" disabled>
        <br>
        <label for="rangeDown"> Range Down: </label>
        <input class="elementData" type="text" id="rangeDown" name="rangeDown" disabled>
        <br>
        <label for="rangeDownSmall"> Range Down Small: </label>
        <input class="elementData" type="text" id="rangeDownSmall" name="rangeDownSmall" disabled>
        <br>
        <label for="classification"> Classification: </label>
        <input class="elementData" type="text" id="classification" name="classification" disabled>
        <br>
        <label for="identifier"> Identifier: </label>
        <input class="elementData" type="text" id="identifier" name="identifier" disabled>
        <br>
        <button class="btn elementData" onclick="saveElementData()" disabled>Save Element Data</button>
      </div>

      <div class="tab-pane" id="load-svg-pane">
      <textarea id="svg-console" bind-value-to="consoleSVG">
      </textarea>
        <button type="button" class="btn btn-info" ng-click="loadSVG()">
          Load
        </button>
        <button type="button" class="btn" ng-click="loadSVGWithoutGrouping()">
          Load without grouping
        </button>
      </div>

      <div class="tab-pane" id="execute-code">
        <textarea id="canvas-console" bind-value-to="console">
        </textarea>
        <button type="button" class="btn btn-info" ng-click="execute()">Execute</button>
      </div>

      <div class="tab-pane" id="json-inout">
      <textarea id="json-console" bind-value-to="consoleJSON">
      </textarea>
        <button type="button" class="btn btn-info" ng-click="loadJSON()">
          Load
        </button>
        <button type="button" class="btn btn-info" ng-click="saveJSON()">
          Save
        </button>
      </div>

    </div>

  </div>

</div>

<script>
  var canvas = new fabric.CanvasWithViewport('canvas');

  var boundingBox = new fabric.Rect({
    fill: "transparent",
    width: 6000,
    height: 4000,
    hasBorders: false,
    hasControls: false,
    lockMovementX: true,
    lockMovementY: true,
    evented: false,
    selectable: false,
    stroke: "#333"
  });

  canvas.add(boundingBox);

  canvas.svgViewportTransformation = false;
  canvas.renderOnAddRemove = false;

  var minZoom = canvas.width / boundingBox.width
  canvas.viewport.zoom = minZoom;
  $("#zoomSlider").attr("min", minZoom);
  $("#zoomSlider").val(minZoom);


  <%
  elements = Element.where(floor: @floor)
  elements.each_with_index do |element, index| %>

  var shape = "<%= asset_path(element.element_type.svg_path + ".svg") %>"

  fabric.loadSVGFromURL(shape, function(objects, options) {

    var loadedObject = fabric.util.groupSVGElements(objects, options);

    loadedObject.toObject = (function (toObject) {
      return function () {
        return fabric.util.object.extend(toObject.call(this), {
          id: this.id,
          floor: this.floor,
          element_type_id: this.element_type_id,
          range_up: this.range_up,
          range_down: this.range_down,
          classification: this.classification,
          identifier: this.identifier,
          modified: this.modified
        });
      };
    })(fabric.Object.prototype.toObject);

    loadedObject.set({
          left: <%= element.left %>,
          top: <%= element.top %>,
          height: <%= element.height %>,
          width: <%= element.width %>,
          scaleX: <%= element.scaleX %>,
          scaleY: <%= element.scaleY %>,
          opacity: <%= element.opacity %>,
          angle: <%= element.angle %>,
          fill: "<%= element.fill %>",
          id: <%= element.id %>,
          floor: <%= element.floor %>,
          element_type_id: <%= element.element_type_id %>,
          range_up: <%= element.range_up %>,
          range_down: <%= element.range_down %>,
          classification: "<%= element.classification %>",
          identifier: "<%= element.identifier %>",
          modified: false
        })
        .setCoords();

    canvas.add(loadedObject);

    <% if index == elements.size - 1 %>
      canvas.renderAll();
    <% end %>
  });
  <% end %>

  function saveCanvas(){
    var obj = canvas.getObjects().filter(o => o.modified == true);

    console.log(JSON.stringify(obj));

    $.ajax({
      url : "/admin/"+<%= @floor %>,
      type : "post",
      data : { elements: JSON.stringify(obj) }
    });
  }

  var clipboardObj, clipboardGroup;
  $(document).on("keydown", function(e){
    if (e.keyCode == 67 && (e.ctrlKey || e.metaKey)){
      var obj = canvas.getActiveObject(), group = canvas.getActiveGroup();
      if(obj){
        clipboardObj = obj;
      }else if(group){
        clipboardGroup = group;
      }
    }else if(e.keyCode == 86 && (e.ctrlKey || e.metaKey)){
      if(clipboardObj) {
        var clone = fabric.util.object.clone(clipboardObj);
        clone.set({
          left: clipboardObj.left + 30,
          top: clipboardObj.top + 30,
        });

        clone.id = null;
        clone.modified = true;

        canvas.add(clone);
        canvas.deactivateAll().renderAll();
        canvas.setActiveObject(clone);

      }else if(clipboardGroup){
        canvas.deactivateAll();

        clipboardGroup.forEachObject(function(o) {
          var clone = fabric.util.object.clone(o);
          clone.set({
            left: o.left + 30,
            top: o.top + 30,
          }).setCoords();

          clone.id = null;
          clone.modified = true;
          canvas.add(clone);
        });

        canvas.renderAll();

      }
    }

  });

  document.body.addEventListener('keydown', function(evt) {
    if(evt.keyCode==18) {
      canvas.isGrabMode = true;
    }

    var movementDelta = 5;

    var activeObject = canvas.getActiveObject();
    var activeGroup = canvas.getActiveGroup();

    if (evt.keyCode === 37) {
      evt.preventDefault(); // Prevent the default action
      if (activeObject) {
        var a = activeObject.get('left') - movementDelta;
        activeObject.set('left', a);
      }
      else if (activeGroup) {
        var a = activeGroup.get('left') - movementDelta;
        activeGroup.set('left', a);
      }

    } else if (evt.keyCode === 39) {
      evt.preventDefault(); // Prevent the default action
      if (activeObject) {
        var a = activeObject.get('left') + movementDelta;
        activeObject.set('left', a);
      }
      else if (activeGroup) {
        var a = activeGroup.get('left') + movementDelta;
        activeGroup.set('left', a);
      }

    } else if (evt.keyCode === 38) {
      evt.preventDefault(); // Prevent the default action
      if (activeObject) {
        var a = activeObject.get('top') - movementDelta;
        activeObject.set('top', a);
      }
      else if (activeGroup) {
        var a = activeGroup.get('top') - movementDelta;
        activeGroup.set('top', a);
      }

    } else if (evt.keyCode === 40) {
      evt.preventDefault(); // Prevent the default action
      if (activeObject) {
        var a = activeObject.get('top') + movementDelta;
        activeObject.set('top', a);
      }
      else if (activeGroup) {
        var a = activeGroup.get('top') + movementDelta;
        activeGroup.set('top', a);
      }
    }

    if (activeObject) {
      activeObject.setCoords();
      canvas.renderAll();
    } else if (activeGroup) {
      activeGroup.setCoords();
      canvas.renderAll();
    }

  });

  document.body.addEventListener('keyup', function(e) {
    if(e.keyCode==18) {
      canvas.isGrabMode = false;
    }
  });

  function saveElementData(){
    var obj = canvas.getActiveObject();

    obj.range_up =  $("#rangeUp").val();
    obj.range_down = $("#rangeDown").val();
    obj.classification =  $("#classification").val();
    obj.identifier = $("#identifier").val();

    $.ajax({
      url : "/admin/" + <%= @floor %> + "/element",
      type : "post",
      data : { element: JSON.stringify(obj) }
    });
  }

  canvas.on('object:modified', function(options) {
    if (options.target._objects) {
      options.target._objects.forEach(function(o) {
        o.modified = true;
      })
    } else {
      options.target.modified = true;
    }

  });

  canvas.on('object:removed', function(options){
    $.ajax({
      url : "/admin/"+<%= @floor %>,
      type : "delete",
      data : { element_id: options.target.id }
    });
  });

  canvas.on('object:selected', function(options){
    $(".elementData").attr("disabled", false);

    $("#rangeUp").val(options.target.range_up);
    $("#rangeUpSmall").val(options.target.range_up);
    $("#rangeDown").val(options.target.range_down);
    $("#rangeDownSmall").val(options.target.range_down);
    $("#classification").val(options.target.classification);
    $("#identifier").val(options.target.identifier);
  });

  canvas.on('selection:cleared', function(options){
    $(".elementData").attr("disabled", true);
    $(".elementData").val('');
  });

  canvas.on("object:moving", function(e) {
    var obj = e.target;
    var top = obj.top;
    var left = obj.left;
    var zoom = canvas.viewport.zoom;

    // width & height we are constraining to must be calculated by applying the inverse of the current viewportTransform
    var c_width = canvas.width / zoom;
    var c_height = canvas.height / zoom;

    var w = obj.width * obj.scaleX;
    var h = obj.height * obj.scaleY;

    var top_bound = boundingBox.top;
    var bottom_bound = boundingBox.top + boundingBox.height - h;
    var left_bound = boundingBox.left;
    var right_bound = boundingBox.left + boundingBox.width - w;

    if( w > c_width ) {
      obj.setLeft(left_bound);
    } else {
      obj.setLeft(Math.min(Math.max(Math.round(left / grid) * grid, left_bound), right_bound));
    }

    if( h > c_height ) {
      obj.setTop(top_bound);
    } else {
      obj.setTop(Math.min(Math.max(Math.round(top / grid) * grid, top_bound), bottom_bound));
    }
  });

  $('#zoomIn').click(function(){
    var newZoom = canvas.viewport.zoom * 1.1;
    if (newZoom <= 1) {
      canvas.setZoom(newZoom);
      $("#zoomSlider").val(newZoom);
    }
    return false;
  });

  $('#zoomOut').click(function(){
    var newZoom = canvas.viewport.zoom / 1.1;
    if (newZoom >= minZoom) {
      canvas.setZoom(newZoom);
      $("#zoomSlider").val(newZoom);
    }
    return false;
  });

  $('#zoomSlider').on('input', function () {
    canvas.setZoom($(this).val());
    if (canvas.viewport.position.x > 0) {
      canvas.viewport.position.x = 0;
    }
    if (canvas.viewport.position.y > 0) {
      canvas.viewport.position.y = 0;
    }
    canvas.renderAll();
  });

  $('.edit').click(function(){
    canvas.isGrabMode = false;
    return false;
  });

  $('.grab').click(function(){
    canvas.isGrabMode = true;
    return false;
  });

  function addShape(assetId, assetPath) {

    var coord = {
      left: (- canvas.viewport.position.x / canvas.viewport.zoom) + ( canvas.width / canvas.viewport.zoom / 2),
      top: (- canvas.viewport.position.y / canvas.viewport.zoom) + ( canvas.height / canvas.viewport.zoom / 2)
    };

    fabric.loadSVGFromURL(assetPath, function(objects, options) {

      var loadedObject = fabric.util.groupSVGElements(objects, options);

      loadedObject.toObject = (function (toObject) {
        return function () {
          return fabric.util.object.extend(toObject.call(this), {
            element_type_id: this.element_type_id,
            range_up: this.range_up,
            range_down: this.range_down,
            classification: this.classification,
            identifier: this.identifier,
            modified: this.modified,
            floor: this.floor,
            id: this.id
          });
        };
      })(fabric.Object.prototype.toObject);

      loadedObject.set({
            left: coord.left,
            top: coord.top,
            angle: 0,
            range_up: 0,
            range_down: 0,
            classification: "",
            identifier: "",
            floor: <%= @floor %>,
            element_type_id: parseInt(assetId),
            modified: true,
            id: null
          })
          .setCoords();

      canvas.add(loadedObject);
    });
  }


  var grid = 20;

  // create grid

  var lines = [];
  for (var i = 0; i < (6000 / grid); i++) {
    lines.push(new fabric.Line([ i * grid, 0, i * grid, 4000], { stroke: '#ccc', selectable: false })); // vertical lines
    lines.push(new fabric.Line([ 0, i * grid, 6000, i * grid], { stroke: '#ccc', selectable: false })) // horizontal lines
  }

  lines.forEach(function(line) {
    canvas.add(line);
  });

  canvas.renderAll();
  canvas.renderOnAddRemove = true;

  function handleScroll(evt){
    var delta = evt.wheelDelta ? evt.wheelDelta/40 : evt.detail ? -evt.detail : 0;
    if (delta > 0) {
      var newZoom = canvas.viewport.zoom / 1.1;
      if (newZoom >= minZoom) {
        canvas.setZoom(newZoom);
        $("#zoomSlider").val(newZoom);
      }
    } else if (delta < 0) {
      var newZoom = canvas.viewport.zoom * 1.1;
      if (newZoom <= 1) {
        canvas.setZoom(newZoom);
        $("#zoomSlider").val(newZoom);
      }
    }
    return evt.preventDefault() && false;
  };

  var canvas_container = document.getElementById('canvas-container');
  canvas_container.addEventListener('DOMMouseScroll',handleScroll,false);
  canvas_container.addEventListener('mousewheel',handleScroll,false);
</script>